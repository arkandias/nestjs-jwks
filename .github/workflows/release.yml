name: Release

on:
  release:
    types: [published]

permissions:
  contents: write
  packages: write

env:
  GHCR_REGISTRY: https://npm.pkg.github.com/

jobs:
  build-and-publish:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Set variables
        id: vars
        run: |
          echo "date=$(date -u +"%Y-%m-%dT%H:%M:%SZ")" >> "${GITHUB_OUTPUT}"

          # Try to get version from release name first, fallback to tag name
          VERSION="${{ github.event.release.name }}"

          # If release name is empty or just whitespace, use tag name
          if [[ -z "${VERSION// }" ]]; then
            VERSION="${{ github.event.release.tag_name }}"
            # Remove 'v' prefix if present
            VERSION="${VERSION#v}"
          fi

          echo "version=${VERSION}" >> "${GITHUB_OUTPUT}"
          echo "Using version: ${VERSION}"

          # Determine if this is a prerelease
          if [[ "${{ github.event.release.prerelease }}" == "true" ]]; then
            echo "npm_tag=next" >> "${GITHUB_OUTPUT}"
            echo "is_prerelease=true" >> "${GITHUB_OUTPUT}"
          else
            echo "npm_tag=latest" >> "${GITHUB_OUTPUT}"
            echo "is_prerelease=false" >> "${GITHUB_OUTPUT}"
          fi

      - uses: ./.github/actions/setup

      - name: Verify package.json version matches release
        run: |
          PACKAGE_VERSION=$(node -p "require('./package.json').version")
          RELEASE_VERSION="${{ steps.vars.outputs.version }}"

          if [[ "$PACKAGE_VERSION" != "$RELEASE_VERSION" ]]; then
            echo "❌ Version mismatch: package.json has $PACKAGE_VERSION, release has $RELEASE_VERSION"
            exit 1
          fi

          echo "✅ Version matches: $RELEASE_VERSION"

      - name: Build package
        run: |
          echo "🏗️ Building package..."
          pnpm run build

          # Verify dist directory was created
          if [[ ! -d "dist" ]]; then
            echo "❌ Build failed: dist directory not found"
            exit 1
          fi

          echo "✅ Build completed successfully"

      - name: Run validation checks
        run: |
          echo "🔍 Running validation checks..."
          pnpm run validate

      - name: Pack and verify package
        run: |
          echo "📦 Packing package..."
          pnpm pack --pack-destination ./packed

          # List contents of the packed package
          echo "📋 Package contents:"
          tar -tzf "./packed/nestjs-jwks-${{ steps.vars.outputs.version }}.tgz"

      - name: Publish to npm
        env:
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
          HUSKY: 0 # Disable Husky during publish
        run: |
          echo "🚀 Publishing to npm..."

          # Configure npm registry and authentication
          pnpm config set registry https://registry.npmjs.org/
          pnpm config set //registry.npmjs.org/:_authToken "${NPM_TOKEN}"

          # Publish with appropriate tag
          pnpm publish --tag ${{ steps.vars.outputs.npm_tag }} --access public

          echo "✅ Published to npm with tag: ${{ steps.vars.outputs.npm_tag }}"

      - name: Publish to GitHub Packages
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "🚀 Publishing to GitHub Packages..."

          # Configure GitHub Packages registry
          pnpm config set @${{ github.repository_owner }}:registry https://npm.pkg.github.com/
          pnpm config set //npm.pkg.github.com/:_authToken "${GITHUB_TOKEN}"

          # Update package.json to use scoped name for GitHub Packages
          # Create a temporary package.json with scoped name
          node -e "
            const pkg = require('./package.json');
            pkg.name = '@${{ github.repository_owner }}/' + pkg.name.replace(/^@[^\/]+\//, '');
            require('fs').writeFileSync('./package-gh.json', JSON.stringify(pkg, null, 2));
          "

          # Publish to GitHub Packages with scoped name
          pnpm publish --tag ${{ steps.vars.outputs.npm_tag }} --registry ${GHCR_REGISTRY} ./package-gh.json --no-git-checks

          echo "✅ Published to GitHub Packages"

      - name: Create release summary
        run: |
          cat >> $GITHUB_STEP_SUMMARY << EOF
          # 🎉 Release Published Successfully

          ## 📦 Package Information
          - **Name**: \`nestjs-jwks\`
          - **Version**: \`${{ steps.vars.outputs.version }}\`
          - **Tag**: \`${{ steps.vars.outputs.npm_tag }}\`
          - **Prerelease**: \`${{ steps.vars.outputs.is_prerelease }}\`
          - **Published**: \`${{ steps.vars.outputs.date }}\`

          ## 📚 Installation
          \`\`\`bash
          # npm
          npm install nestjs-jwks@${{ steps.vars.outputs.version }}

          # pnpm  
          pnpm add nestjs-jwks@${{ steps.vars.outputs.version }}

          # yarn
          yarn add nestjs-jwks@${{ steps.vars.outputs.version }}
          \`\`\`

          ## 🔗 Links
          - [npm Package](https://www.npmjs.com/package/nestjs-jwks/v/${{ steps.vars.outputs.version }})
          - [GitHub Packages](https://github.com/${{ github.repository }}/pkgs/npm/nestjs-jwks)
          - [Release Notes](${{ github.event.release.html_url }})
          EOF

      - name: Update release with package links
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Add package information to the release description
          CURRENT_BODY="${{ github.event.release.body }}"

          PACKAGE_INFO="

          ---

          ## 📦 Package Installation

          \`\`\`bash
          # npm
          npm install nestjs-jwks@${{ steps.vars.outputs.version }}

          # pnpm
          pnpm add nestjs-jwks@${{ steps.vars.outputs.version }}

          # yarn  
          yarn add nestjs-jwks@${{ steps.vars.outputs.version }}
          \`\`\`

          **Links:**
          - [📦 npm Package](https://www.npmjs.com/package/nestjs-jwks/v/${{ steps.vars.outputs.version }})
          - [📦 GitHub Packages](https://github.com/${{ github.repository }}/pkgs/npm/nestjs-jwks)
          "

          # Update the release with package information
          gh release edit ${{ github.event.release.tag_name }} \
            --notes "${CURRENT_BODY}${PACKAGE_INFO}"
